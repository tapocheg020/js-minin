// –û—á–µ–Ω—å –Ω—É–∂–Ω—ã–µ —Å–∫–∏–ª–ª—ã –≤ —Ä–∞–±–æ—Ç–µ —Å –æ–±—å–µ–∫—Ç–∞–º–∏ –∏ –º–∞—Å—Å–∏–≤–∞–º–∏
/*
	Arrays - Methods
	forEach, indexOf, lastIndexOf, find, findIndex,
	some, every, slice, splice, toSplice,
	filter, map, reduce.
*/

// --forEach -–ø–µ—Ä–µ–±–æ—Ä –º–∞—Å—Å–∏–≤–∞

const log = console.log

const skills = ['html', 'css', 'js', 'scss', 'git', 'ts', 'react', 'scss']
// skills.forEach((value, index, thisArray) => log( value, index, thisArray))

const logValues = (value, index) => log(value, '-', index)
// skills.forEach(logValues)

// –ü–æ–∏—Å–∫ –≤ –º–∞—Å—Å–∏–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞ - –æ—Ç–±–æ—Ä
// log(skills.indexOf('ts'))
// log(skills.indexOf('js', 4)) // –æ—Ç–±–æ—Ä —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞(-1)

// //
// log(skills.indexOf('scss'))
// log(skills.lastIndexOf('scss'))

// log(skills.indexOf('ts'))
// log(skills.lastIndexOf('ts'))

// <------------–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —á–µ–≥–æ –ª–∏–±–æ –≤ –º–∞—Å—Å–∏–≤–µ--------------->
// log(skills.every(skill => skill === 'js'))
// log(skills.some(skill => skill === 'js'))

const users = [
	{ id: 1, name: 'Vasya' },
	{ id: 2, name: 'Petya' },
	{ id: 3, name: 'Masha' },
	{ id: 4, name: 'Nikita' },
]

const everyHasNames = users.every(user => 'name' in user)
const sommeHasNames = users.some(user => 'id' in user)
// log(everyHasNames, sommeHasNames)

const admUser = users.find(user => user.id === 3)
const admUserIndex = users.findIndex(user => user.id === 3)
// log(admUser, admUserIndex)

const filteredSkills = skills.filter(skill => skill.includes('c'))
//–ú–µ—Ç–æ–¥ filter - –æ—Ç–±–∏—Ä–∞–µ—Ç —Ç–æ–ª—å–∫–æ true —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –≤ –º–∞—Å—Å–∏–≤–µ
// log(filteredSkills)
const eventNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12].filter(
	num => num % 2 == 0
)
// log(eventNumbers)

const clients = [
	{ id: 1, level: 3, name: 'Ilya', status: 'offline' },
	{ id: 2, level: 1, name: 'Sveta', status: 'offline' },
	{ id: 3, level: 5, name: 'Katya', status: 'offline' },
	{ id: 4, level: 8, name: 'Nastya', status: 'online' },
	{ id: 5, level: 2, name: 'Sergey', status: 'offline' },
	{ id: 6, level: 6, name: 'Pasha', status: 'online' },
	{ id: 7, level: 5, name: 'Zhenya', status: 'online' },
]

const onlineClients = clients.filter(
	client => client.status === 'online' && client.level >= 5
)

// for (let i = 0; i < onlineClients.length; i++) {
// 	console.group('Client number ' + (i + 1))
// 	console.log(`id - ${onlineClients[i].id}`)
// 	console.log(onlineClients[i].name)
// 	console.log(onlineClients[i].level)
// 	console.log(onlineClients[i].status)

// 	console.groupEnd()
// } //—Ç–∏–ø–∞ —Å—Ç–∞—Ä—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª –≤—Å–ø–æ–º–∏–Ω–∞—é

// log(onlineClients)

// 5:37:44

// <----------------------–ú–µ—Ç–æ–¥ Slice----------------->

const newUsers = users.slice(0, 4)
// log(newUsers)

// delete users[admUserIndex]
// log(users)//—É–¥–∞–ª—è–µ—Ç –Ω–æ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ –≤–º–µ—Å—Ç–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ

/*
--------Splice-------
*/

// log(users.splice(admUserIndex, 1))
// log(users)//—É–¥–∞–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –∏ –¥–µ–ª–∞–µ—Ç –º–∞—Å—Å–∏–≤ —á–∏—Å—Ç—ã–º

// log(users.splice(2, 0, { id: 3, name: 'Ilya' }))
// log(users)// –≤—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤ –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º

const users2025 = users.toSpliced(3, 1, { id: 4, name: 'Sveta' }) //–Ω–µ –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π –º–∞—Å—Å–∏–≤   ES2023
// log(users2025) // –≤—Å—Ç–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –º–∞—Å—Å–∏–≤ –ø–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –∏–Ω–¥–µ–∫—Å–æ–º
// log(users)

const str = 'Anastasia'
// log(str.split('').reverse().join(''))

/*
<----------Map-------->
–ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å—Å–∏–≤–æ–≤

map –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –º–∞—Å—Å–∏–≤–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
*/

const clientsName = clients.map(client => client.name) //–ø–∏—à–∏ return –µ—Å–ª–∏ –Ω–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
// log(clientsName)

const clientsNameAndStatus = clients
	.map(client => {
		return {
			name: client.name,
			status: client.status,
			isVzrosliy: true,
		}
	})
	.map(client => {
		if (client.status === 'online') {
			client.status = 'online üòéüòé'
		} else {
			client.status = 'offline üò¥üò¥'
		}
		return client
	})
	.filter(onlik => onlik.status.startsWith('online'))
// log(clientsNameAndStatus)

//5:48

//    –ú–µ—Ç–æ–¥ reduce
/*
		reduce –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –µ–¥–∏–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞
		arr.reduce((accumulator, item, index, array) => {
			//....
		},[initial])

//Accumulator - —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —Ä–∞–≤–µ–Ω initial –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω initial)
//Item - —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞
//Index - –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
//Array - –º–∞—Å—Å–∏–≤
*/

const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

// log(numbers.reduce((acc, cur) => acc + cur, 0))

const carsBrand = [
	{
		id: 1,
		brand: 'BMW',
		model: '3 series',
		color: 'black',
		price: 1_500_000,
	},
	{
		id: 2,
		brand: 'Audi',
		model: 'A4',
		color: 'brown',
		price: 1_200_000,
	},
	{
		id: 3,
		brand: 'Mersedes',
		model: 'C class',
		color: 'silver',
		price: 1_700_000,
	},
	{
		id: 4,
		brand: 'Skoda',
		model: 'Octavia',
		color: 'White',
		price: 1_200_000,
	},
]

const totalPriceCars = carsBrand.reduce((acc, cur) => acc + cur.price, 0)
// log(totalPriceCars)

let brandCount = 0
const brandMaps = carsBrand.reduce((acc, cur) => {
	if (cur.brand in acc) {
		acc[cur.brand]++
	} else {
		acc[cur.brand] = 1
		brandCount++
	}//—Å–Ω–∞—á–∞–ª–∞ –∏–¥–µ—Ç –≤ else  –∏ —Å–æ–∑–¥–∞–µ—Ç acc, –ø–æ—Ç–æ–º –∏–¥–µ—Ç –≤ if
	return acc
}, {})

// log(brandMaps)
// log(brandCount)

// 5:58:08